import Data.Char (isUpper)

{-

Operarores logicos que iremos utilizar
para renomear os operadores encontrados
por esses abaixo

-}
data OperadoresLogicos
    = OPVar Char                 -- Variável proposicional
    | OPAnd                      -- Conjunção (∧)
    | OPOr                       -- Disjunção (∨)
    | OPNot                      -- Negação (¬)
    | OPImplies                  -- Implicação (→)
    | OPBiconditional            -- Bicondicional (↔)
    | OPAbreParenteses           -- Parêntese de abertura
    | OPFechaParenteses          -- Parêntese de fechamento
    deriving (Eq, Show)

{-

definicao das variaveis logicas
-}
data VariavelLogica
    = Var Char                -- Variável proposicional
    | And VariavelLogica VariavelLogica    -- Conjunção (∧)
    | Or VariavelLogica VariavelLogica     -- Disjunção (∨)
    | Not VariavelLogica                -- Negação (¬)
    | Implies VariavelLogica VariavelLogica  -- Implicação (→)
    | Biconditional VariavelLogica VariavelLogica  -- Bicondicional (↔)
    deriving (Eq, Show)



{-

essa funcao ira realizar a transformacao de operadores logicos 
em linguagem normal para o haskell(linguagem de programacao)

ex: A ∧ B vira [OPVar 'A', OPAnd, OPVar 'B']
-- h: head ; t: tail (que nem o construtor de lista em lambda, onde h é o elemento 
e t é o resto da lista )

-- operador : (identificado apos nossos OperadoresLogicos) representa o cons (construtor de lista)
colocando o elemento que antecede ele adiante da lista que sucede


-}
parseToOperadoresLogicos :: String -> Either String [OperadoresLogicos]
parseToOperadoresLogicos [] = Right []
parseToOperadoresLogicos (h:t) 
    | take 3 (h:t) == "and"  = fmap (OPAnd :) (parseToOperadoresLogicos (drop 3 t))
    | take 2 (h:t) == "or"   = fmap (OPOr :) (parseToOperadoresLogicos (drop 2 t))
    | take 3 (h:t) == "not"  = fmap (OPNot :) (parseToOperadoresLogicos (drop 3 t))
    | take 2 (h:t) == "=>"   = fmap (OPImplies :) (parseToOperadoresLogicos (drop 2 t))
    | take 3 (h:t) == "<=>"  = fmap (OPBiconditional :) (parseToOperadoresLogicos (drop 3 t))
    | h == '∧'                = fmap (OPAnd :) (parseToOperadoresLogicos t)
    | h == '∨'                = fmap (OPOr :) (parseToOperadoresLogicos t)
    | h == '¬'                = fmap (OPNot :) (parseToOperadoresLogicos t)
    | h == '→'                = fmap (OPImplies :) (parseToOperadoresLogicos t)
    | h == '↔'                = fmap (OPBiconditional :) (parseToOperadoresLogicos t)
    | h == '('                = fmap (OPAbreParenteses :) (parseToOperadoresLogicos t)
    | h == ')'                = fmap (OPFechaParenteses :) (parseToOperadoresLogicos t)
    | isUpper h               = fmap (OPVar h :) (parseToOperadoresLogicos t)
    | h == ' '                = parseToOperadoresLogicos t
    | otherwise               = Left ("Caracter inválido: " ++ [h])

{-

Essa funcao é responsavel por interpretar a entrada do usuario e passar para 
Operadores logicos, colocando-os em uma notacao similar a calculo lambda.

primeiro passa a entrada para uma lista de operadoresLogicos, apos isso, passa
a lista para o formato de VariavelLogica

A and B fica and (A B) 


-}
parseExpression :: String -> Either String VariavelLogica
parseExpression expressaoLogicaEntrada = do
    operadoresLogicos <- parseToOperadoresLogicos expressaoLogicaEntrada
    toVariavelLogica operadoresLogicos


toVariavelLogica :: [OperadoresLogicos] -> Either String VariavelLogica
toVariavelLogica expressao = parseExpressaoLogica expressao



{-

    Funcao que recebe o array de Operadores Logicos e passa as demais funcoes 
    validarem seus casos(nesse ela chama a parseBiconditional, que valida se a expressao possui
    uma bicondicional, conforme as prioridades)

-}
parseExpressaoLogica :: [OperadoresLogicos] -> Either String VariavelLogica
parseExpressaoLogica expressao = case parseBiconditional expressao of
    Right (expressaoFinal, []) -> Right expressaoFinal
    Right (_, expressoesNaoProcessadas)   -> Left ("Elementos remanescentes: " ++ show expressoesNaoProcessadas)
    Left erro        -> Left erro

{-

ordem de prioridades ( bicondicional -> implicação -> disjunção -> conjunção -> negação)

funcoes parse{operador logico} tem como base pegar o array de operadores e retornar
um either com uma string e tupla.

ele retorna either para a funcao que chama elas, realizar
um case left(caso erro) right(caso aja certo)
-}


parseBiconditional :: [OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])
parseBiconditional expressao = do
    (expressaoParcial, restante) <- parseImplies expressao
    parseRightOperadores expressaoParcial OPBiconditional Biconditional parseBiconditional restante
    
parseImplies :: [OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])
parseImplies expressao = do
    (expressaoParcial, restante) <- parseOr expressao
    parseRightOperadores expressaoParcial OPImplies Implies parseImplies restante

parseOr :: [OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])
parseOr expressao = do
    (expressaoParcial, restante) <- parseAnd expressao
    parseRightOperadores expressaoParcial OPOr Or parseOr restante

parseAnd :: [OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])
parseAnd expressao = do
    (expressaoParcial, restante) <- parseNot expressao
    parseRightOperadores expressaoParcial OPAnd And parseAnd restante

parseNot :: [OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])
parseNot (OPNot : restante)  = do
    (expressaoNegada, restoExpressao) <- parseNot restante
    Right (Not expressaoNegada, restoExpressao)
parseNot expressao = parseTermo expressao

parseTermo :: [OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])
parseTermo (OPVar variavel : restante) = Right (Var variavel, restante)
parseTermo (OPAbreParenteses : restante) = do
    (expressaoAgrupada, expressoesRestantes) <- parseBiconditional restante
    case expressoesRestantes of
        (OPFechaParenteses : restante') -> Right (expressaoAgrupada, restante')
        _                            -> Left "Parêntese não fechado"
parseTermo _ = Left "Expressão inválida"

{-
exemplos em parenteses
    essa funcao pega uma variavel logica analisada(A), 
    OperadoresLogicos(OPAnd),
    a definicao/type da variavel logica( no caso And VariavelLogica VariavelLogica, por exemplo)
    a funcao de parse do operador logico(parseAnd),
    resto da expressao logica

-}
parseRightOperadores :: VariavelLogica -> OperadoresLogicos -> (VariavelLogica -> VariavelLogica -> VariavelLogica) -> ([OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])) -> [OperadoresLogicos] -> Either String (VariavelLogica, [OperadoresLogicos])
parseRightOperadores expressaoParcial operadorDireita construtorDeOperador nextParser expressao = case expressao of
    (proximoOperador : restante) | proximoOperador == operadorDireita -> do
        (expressaoRestante, resto) <- nextParser restante
        Right (construtorDeOperador expressaoParcial expressaoRestante, resto)
    _ -> Right (expressaoParcial, expressao)


-- Função para imprimir a expressão lógica após o parse
printExpr :: String -> IO ()
printExpr expressao = do
    let resultado = parseToOperadoresLogicos expressao
    case resultado of
        Right parsed -> print  parsed
        Left erro -> putStrLn erro

-- Exemplos de teste
main :: IO ()
main = do
    putStrLn "Digite abaixo a expressão de lógica proposicional:"
    expressao <- getLine
    case parseExpression expressao of
        Right expressao -> putStrLn $ "Expressão lógica: " ++ show expressao
        Left erro   -> putStrLn $ "Erro: " ++ erro

    
    